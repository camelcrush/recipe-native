{"version":3,"sources":["recipe.js","App.js","index.js","utils.js"],"names":["recipe","name","content","Container","styled","View","RecipeContainer","RecipeList","FlatList","Source","TouchableOpacity","props","selected","SoureName","Text","ResultContainer","ResultList","Result","Resultname","ButtonContainer","Button","ButtonText","Alert","Animated","createAnimatedComponent","AlertText","registerRootComponent","useState","currentRecipe","setCurrentRecipe","result","setResult","randomRecipe","useMemo","slice","sort","Math","random","choiceRecipe","opacityOne","useRef","Value","current","opacityTwo","opacityThree","onPressCheck","a","b","length","sequence","spring","toValue","useNativeDriver","start","JSON","stringify","console","log","prev","contentContainerStyle","flexGrow","justifyContent","data","extraData","numColumns","columnWrapperStyle","ItemSeparatorComponent","style","height","keyExtractor","item","renderItem","index","onPress","source","includes","number","indexOf","splice","push","onChoice","opacity","color","Ionicons","size","marginLeft"],"mappings":"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","file":"static/js/app.ff04875d.chunk.js","sourcesContent":["export const recipe = [\n  {\n    name: \"tomato-pizza\",\n    content: [\n      \"토마토소스\",\n      \"모짜(220g)\",\n      \"양파\",\n      \"버섯\",\n      \"콘\",\n      \"미트\",\n      \"화이트갈릭\",\n      \"고구마무스\",\n      \"카나디언/페퍼로니\",\n      \"베이컨\",\n      \"파인애플\",\n      \"체다치즈청피망\",\n    ],\n  },\n  {\n    name: \"cheeze-pizza\",\n    content: [\"me\", \"my\", \"you\", \"we\"],\n  },\n];\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { Animated, View } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport { recipe } from \"./recipe\";\nimport { shuffleArray } from \"./utils\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: #2980b9;\n  justify-content: center;\n  align-items: center;\n`;\nconst RecipeContainer = styled.View`\n  flex: 2;\n`;\nconst RecipeList = styled.FlatList`\n  padding: 10px 10px;\n`;\n\nconst Source = styled.TouchableOpacity`\n  background-color: ${(props) => (props.selected ? \"gray\" : \"#9b59b6\")};\n  padding: 5px 10px;\n  border-radius: 10px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.8);\n  justify-content: center;\n  align-items: center;\n  margin: 0px 5px;\n`;\n\nconst SoureName = styled.Text`\n  color: #ecf0f1;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nconst ResultContainer = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nconst ResultList = styled.FlatList`\n  padding: 10px 10px;\n`;\nconst Result = styled.View`\n  background-color: #ff7979;\n  padding: 5px 10px;\n  border-radius: 10px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.8);\n  justify-content: center;\n  align-items: center;\n  margin: 0px 5px;\n`;\nconst Resultname = styled.Text`\n  color: #ecf0f1;\n  font-size: 16px;\n  font-weight: 600;\n`;\nconst ButtonContainer = styled.View`\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\nconst Button = styled.TouchableOpacity`\n  justify-content: center;\n  align-items: center;\n`;\nconst ButtonText = styled.Text``;\n\nconst Alert = styled(Animated.createAnimatedComponent(View))`\n  background-color: rgba(255, 255, 255, 0.8);\n  width: 300px;\n  height: 100px;\n  position: absolute;\n  z-index: 10;\n  border-radius: 25px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.8);\n  align-items: center;\n  justify-content: center;\n`;\nconst AlertText = styled.Text`\n  font-size: 24px;\n  font-weight: 700;\n`;\n\nexport default function App() {\n  const [currentRecipe, setCurrentRecipe] = useState(0);\n  const [result, setResult] = useState([]);\n  const randomRecipe = useMemo(\n    () => shuffleArray(recipe[currentRecipe].content),\n    [currentRecipe]\n  );\n  let choiceRecipe = [];\n  const opacityOne = useRef(new Animated.Value(0)).current;\n  const opacityTwo = useRef(new Animated.Value(0)).current;\n  const opacityThree = useRef(new Animated.Value(0)).current;\n\n  const onChoice = (source, index) => {\n    if (result.includes(source)) {\n      const number = result.indexOf(source);\n      if (number !== -1) {\n        choiceRecipe = result;\n        choiceRecipe.splice(number, 1);\n      }\n    } else {\n      choiceRecipe = result;\n      choiceRecipe.push(source);\n    }\n    setResult([...choiceRecipe]);\n  };\n  const onPressCancel = () => {\n    setResult([]);\n  };\n  const equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n  const onPressCheck = (result) => {\n    if (result.length !== recipe[currentRecipe].content.length) {\n      Animated.sequence([\n        Animated.spring(opacityOne, {\n          toValue: 1,\n          useNativeDriver: true,\n        }),\n        Animated.spring(opacityOne, {\n          toValue: 0,\n          useNativeDriver: true,\n        }),\n      ]).start();\n    } else {\n      if (equals(recipe[currentRecipe].content, result)) {\n        Animated.sequence([\n          Animated.spring(opacityTwo, {\n            toValue: 1,\n            useNativeDriver: true,\n          }),\n          Animated.spring(opacityTwo, {\n            toValue: 0,\n            useNativeDriver: true,\n          }),\n        ]).start();\n        console.log(\"Success\");\n        setCurrentRecipe((prev) => prev + 1);\n        setResult([]);\n      } else {\n        Animated.sequence([\n          Animated.spring(opacityThree, {\n            toValue: 1,\n            useNativeDriver: true,\n          }),\n          Animated.spring(opacityThree, {\n            toValue: 0,\n            useNativeDriver: true,\n          }),\n        ]).start();\n        console.log(\"Retry\");\n      }\n    }\n  };\n  return (\n    <Container>\n      <RecipeContainer>\n        <RecipeList\n          contentContainerStyle={{\n            flexGrow: 1,\n            justifyContent: \"center\",\n          }}\n          data={randomRecipe}\n          extraData={currentRecipe}\n          numColumns={3}\n          columnWrapperStyle={{\n            justifyContent: \"center\",\n          }}\n          ItemSeparatorComponent={() => <View style={{ height: 10 }} />}\n          keyExtractor={(item) => item}\n          renderItem={({ item, index }) => (\n            <Source\n              onPress={() => onChoice(item, index)}\n              selected={result.includes(item) ? true : false}\n            >\n              <SoureName>{item}</SoureName>\n            </Source>\n          )}\n        />\n      </RecipeContainer>\n      <Alert style={{ opacity: opacityOne }}>\n        <AlertText style={{ color: \"#f0932b\" }}>답을 다 채우세요</AlertText>\n      </Alert>\n      <Alert style={{ opacity: opacityTwo }}>\n        <AlertText style={{ color: \"#6ab04c\" }}>Success!!</AlertText>\n      </Alert>\n      <Alert style={{ opacity: opacityThree }}>\n        <AlertText style={{ color: \"#eb4d4b\" }}>Retry!!</AlertText>\n      </Alert>\n      <ResultContainer>\n        <ResultList\n          data={result}\n          numColumns={3}\n          columnWrapperStyle={{\n            justifyContent: \"center\",\n          }}\n          ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n          keyExtractor={(item) => item}\n          renderItem={({ item, index }) => (\n            <Result>\n              <Resultname>\n                {index + 1}. {item}\n              </Resultname>\n            </Result>\n          )}\n        />\n      </ResultContainer>\n      <ButtonContainer>\n        <Button onPress={onPressCancel}>\n          <Ionicons name=\"close-circle\" size={50} color=\"#eb4d4b\" />\n          <ButtonText>Cancel</ButtonText>\n        </Button>\n        <Button style={{ marginLeft: 30 }} onPress={() => onPressCheck(result)}>\n          <Ionicons name=\"checkmark-circle\" size={50} color=\"#6ab04c\" />\n          <ButtonText>Check</ButtonText>\n        </Button>\n      </ButtonContainer>\n    </Container>\n  );\n}\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","export const shuffleArray = (inputArray) => {\n  return inputArray.slice().sort(() => Math.random() - 0.5);\n};\n"],"sourceRoot":""}