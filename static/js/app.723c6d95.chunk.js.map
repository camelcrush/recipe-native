{"version":3,"sources":["screens/Home.js","recipe.js","components/RecipeList.js","components/Button.js","components/ResultList.js","components/ResultAlert.js","screens/Game.js","utils.js","navigations/Stacks.js","index.js","App.js"],"names":["Container","styled","View","GoButton","TouchableOpacity","GoText","Text","Home","navigate","navigation","onPress","recipe","name","content","RecipeFlatList","FlatList","Source","props","selected","SoureName","RecipeList","randomRecipe","currentRecipe","choiceRecipe","result","stateFn","contentContainerStyle","flexGrow","justifyContent","data","extraData","numColumns","columnWrapperStyle","ItemSeparatorComponent","style","height","keyExtractor","item","renderItem","index","source","includes","number","indexOf","splice","push","onChoice","ButtonContainer","ButtonText","Button","color","word","Ionicons","size","ResultFlatList","Result","Resultname","ResultList","Alert","Animated","createAnimatedComponent","AlertText","Record","ResultAlert","opacity","comment","record","RecipeContainer","ResultContainer","Timer","Seconds","Game","setOptions","useState","isFinish","setIsFinish","minutes","setMintes","seconds","setSeconds","setCurrentRecipe","setResult","useMemo","slice","sort","Math","random","useEffect","timer","setInterval","prev","clearInterval","title","opacityOne","useRef","Value","current","opacityTwo","opacityThree","onPressCheck","a","b","length","sequence","spring","toValue","useNativeDriver","start","JSON","stringify","toString","padStart","Stack","createNativeStackNavigator","Stacks","Navigator","screenOptions","headerTransparent","headerTintColor","headerBackTitleVisible","Screen","component","registerRootComponent","NavigationContainer"],"mappings":"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","file":"static/js/app.723c6d95.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components/native\";\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: #2980b9;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst GoButton = styled.TouchableOpacity`\n  padding: 10px 20px;\n  background-color: blueviolet;\n  border-radius: 20px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.8);\n`;\nconst GoText = styled.Text`\n  color: white;\n  font-size: 24px;\n  font-weight: 600;\n`;\n\nconst Home = ({ navigation: { navigate } }) => {\n  return (\n    <Container>\n      <GoButton onPress={() => navigate(\"Game\")}>\n        <GoText>Go Play!</GoText>\n      </GoButton>\n    </Container>\n  );\n};\n\nexport default Home;\n","export const recipe = [\n  {\n    name: \"tomato-pizza\",\n    content: [\n      \"토마토소스\",\n      \"모짜(220g)\",\n      \"양파\",\n      \"버섯\",\n      \"콘\",\n      \"미트\",\n      \"화이트갈릭\",\n      \"고구마무스\",\n      \"카나디언/페퍼로니\",\n      \"베이컨\",\n      \"파인애플\",\n      \"체다치즈청피망\",\n    ],\n  },\n  {\n    name: \"cheeze-pizza\",\n    content: [\"me\", \"my\", \"you\", \"we\"],\n  },\n];\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport styled from \"styled-components/native\";\n\nconst RecipeFlatList = styled.FlatList`\n  padding: 10px 10px;\n`;\n\nconst Source = styled.TouchableOpacity`\n  background-color: ${(props) => (props.selected ? \"gray\" : \"#9b59b6\")};\n  padding: 5px 10px;\n  border-radius: 10px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.8);\n  justify-content: center;\n  align-items: center;\n  margin: 0px 5px;\n`;\n\nconst SoureName = styled.Text`\n  color: #ecf0f1;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nconst RecipeList = ({\n  randomRecipe,\n  currentRecipe,\n  choiceRecipe,\n  result,\n  stateFn,\n}) => {\n  const onChoice = (source, index) => {\n    if (result.includes(source)) {\n      const number = result.indexOf(source);\n      if (number !== -1) {\n        choiceRecipe = result;\n        choiceRecipe.splice(number, 1);\n      }\n    } else {\n      choiceRecipe = result;\n      choiceRecipe.push(source);\n    }\n    stateFn([...choiceRecipe]);\n  };\n  return (\n    <RecipeFlatList\n      contentContainerStyle={{\n        flexGrow: 1,\n        justifyContent: \"center\",\n      }}\n      data={randomRecipe}\n      extraData={currentRecipe}\n      numColumns={3}\n      columnWrapperStyle={{\n        justifyContent: \"center\",\n      }}\n      ItemSeparatorComponent={() => <View style={{ height: 10 }} />}\n      keyExtractor={(item) => item}\n      renderItem={({ item, index }) => (\n        <Source\n          onPress={() => onChoice(item, index)}\n          selected={result.includes(item) ? true : false}\n        >\n          <SoureName>{item}</SoureName>\n        </Source>\n      )}\n    />\n  );\n};\n\nexport default RecipeList;\n","import React from \"react\";\nimport styled from \"styled-components/native\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nconst ButtonContainer = styled.TouchableOpacity`\n  justify-content: center;\n  align-items: center;\n  margin-left: 20px;\n`;\nconst ButtonText = styled.Text``;\n\nconst Button = ({ onPress, name, color, word }) => {\n  return (\n    <ButtonContainer onPress={onPress}>\n      <Ionicons name={name} size={50} color={color} />\n      <ButtonText>{word}</ButtonText>\n    </ButtonContainer>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport styled from \"styled-components/native\";\n\nconst ResultFlatList = styled.FlatList`\n  padding: 10px 10px;\n`;\nconst Result = styled.View`\n  background-color: #ff7979;\n  padding: 5px 10px;\n  border-radius: 10px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.8);\n  justify-content: center;\n  align-items: center;\n  margin: 0px 5px;\n`;\nconst Resultname = styled.Text`\n  color: #ecf0f1;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nconst ResultList = ({ result }) => {\n  return (\n    <ResultFlatList\n      data={result}\n      numColumns={3}\n      columnWrapperStyle={{\n        justifyContent: \"center\",\n      }}\n      ItemSeparatorComponent={() => <View style={{ height: 5 }} />}\n      keyExtractor={(item) => item}\n      renderItem={({ item, index }) => (\n        <Result>\n          <Resultname>\n            {index + 1}. {item}\n          </Resultname>\n        </Result>\n      )}\n    />\n  );\n};\n\nexport default ResultList;\n","import React from \"react\";\nimport styled from \"styled-components/native\";\nimport { Animated, View } from \"react-native\";\n\nconst Alert = styled(Animated.createAnimatedComponent(View))`\n  background-color: rgba(255, 255, 255, 0.8);\n  width: 300px;\n  height: 100px;\n  position: absolute;\n  z-index: 10;\n  border-radius: 25px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.8);\n  align-items: center;\n  justify-content: center;\n`;\nconst AlertText = styled.Text`\n  font-size: 24px;\n  font-weight: 700;\n`;\nconst Record = styled.Text`\n  color: #e74c3c;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst ResultAlert = ({ opacity, color, comment, record }) => {\n  return (\n    <Alert style={{ opacity }}>\n      <AlertText style={{ color }}>{comment}</AlertText>\n      <Record>{record}</Record>\n    </Alert>\n  );\n};\n\nexport default ResultAlert;\n","import React, { useRef, useState, useMemo, useEffect } from \"react\";\nimport { Animated } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport { recipe } from \"../recipe\";\nimport { shuffleArray } from \"../utils\";\nimport RecipeList from \"../components/RecipeList\";\nimport Button from \"../components/Button\";\nimport ResultList from \"../components/ResultList\";\nimport ResultAlert from \"../components/ResultAlert\";\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: #2980b9;\n  justify-content: center;\n  align-items: center;\n  padding-top: 100px;\n`;\nconst RecipeContainer = styled.View`\n  flex: 1.5;\n`;\nconst ResultContainer = styled.View`\n  flex: 1.5;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\nconst ButtonContainer = styled.View`\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\nconst Timer = styled.View`\n  justify-content: center;\n  align-items: center;\n`;\nconst Seconds = styled.Text`\n  color: white;\n  font-size: 30px;\n  font-weight: 600;\n`;\n\nconst Game = ({ navigation: { setOptions } }) => {\n  const [isFinish, setIsFinish] = useState(false);\n  const [minutes, setMintes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [currentRecipe, setCurrentRecipe] = useState(0);\n  const [result, setResult] = useState([]);\n  const randomRecipe = useMemo(\n    () => shuffleArray(recipe[currentRecipe].content),\n    [currentRecipe]\n  );\n  useEffect(() => {\n    if (!isFinish) {\n      const timer = setInterval(() => setSeconds((prev) => prev + 1), 1000);\n      return () => clearInterval(timer);\n    }\n  }, [isFinish]);\n  useEffect(() => {\n    setOptions({ title: recipe[currentRecipe].name });\n  }, [currentRecipe]);\n  let choiceRecipe = [];\n  const opacityOne = useRef(new Animated.Value(0)).current;\n  const opacityTwo = useRef(new Animated.Value(0)).current;\n  const opacityThree = useRef(new Animated.Value(0)).current;\n  const onPressCancel = () => {\n    setResult([]);\n  };\n  const equals = (a, b) =>\n    JSON.stringify(a.slice(4)) === JSON.stringify(b.slice(4));\n  const onPressCheck = (result) => {\n    if (result.length !== recipe[currentRecipe].content.length) {\n      Animated.sequence([\n        Animated.spring(opacityOne, {\n          toValue: 1,\n          useNativeDriver: true,\n        }),\n        Animated.spring(opacityOne, {\n          toValue: 0,\n          useNativeDriver: true,\n        }),\n      ]).start();\n    } else {\n      if (equals(recipe[currentRecipe].content, result)) {\n        if (currentRecipe + 1 !== recipe.length) {\n          Animated.sequence([\n            Animated.spring(opacityTwo, {\n              toValue: 1,\n              useNativeDriver: true,\n            }),\n            Animated.spring(opacityTwo, {\n              toValue: 0,\n              useNativeDriver: true,\n            }),\n          ]).start();\n          setCurrentRecipe((prev) => prev + 1);\n        } else {\n          Animated.spring(opacityTwo, {\n            toValue: 1,\n            useNativeDriver: true,\n          }).start();\n          setIsFinish(true);\n        }\n        setResult([]);\n      } else {\n        Animated.sequence([\n          Animated.spring(opacityThree, {\n            toValue: 1,\n            useNativeDriver: true,\n          }),\n          Animated.spring(opacityThree, {\n            toValue: 0,\n            useNativeDriver: true,\n          }),\n        ]).start();\n      }\n    }\n  };\n  if (seconds == 60) {\n    setMintes((prev) => prev + 1);\n    setSeconds(0);\n  }\n  return (\n    <Container>\n      <Timer>\n        <Seconds>\n          {minutes} : {seconds.toString().padStart(2, 0)}\n        </Seconds>\n      </Timer>\n      <RecipeContainer>\n        <RecipeList\n          randomRecipe={randomRecipe}\n          currentRecipe={currentRecipe}\n          choiceRecipe={choiceRecipe}\n          result={result}\n          stateFn={setResult}\n        />\n      </RecipeContainer>\n      <ResultAlert\n        opacity={opacityOne}\n        color=\"#f0932b\"\n        comment=\"답을 모두 채우세요\"\n      />\n      <ResultAlert\n        opacity={opacityTwo}\n        color=\"#6ab04c\"\n        comment=\"Success!!\"\n        record={`${minutes} : ${seconds.toString().padStart(2, 0)}`}\n      />\n      <ResultAlert opacity={opacityThree} color=\"#eb4d4b\" comment=\"Retry!!\" />\n      <ResultContainer>\n        <ResultList result={result} />\n      </ResultContainer>\n      <ButtonContainer>\n        <Button\n          onPress={onPressCancel}\n          name=\"close-circle\"\n          color=\"#eb4d4b\"\n          word=\"Cancle\"\n        />\n        <Button\n          onPress={() => onPressCheck(result)}\n          name=\"checkmark-circle\"\n          color=\"#6ab04c\"\n          word=\"Check\"\n        />\n      </ButtonContainer>\n    </Container>\n  );\n};\n\nexport default Game;\n","export const shuffleArray = (inputArray) => {\n  return inputArray.slice().sort(() => Math.random() - 0.5);\n};\n","import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Home from \"../screens/Home\";\nimport Game from \"../screens/Game\";\n\nconst Stack = createNativeStackNavigator();\n\nconst Stacks = () => (\n  <Stack.Navigator\n    screenOptions={{\n      headerTransparent: true,\n      headerTintColor: \"rgba(255,255,255,0.8)\",\n      headerBackTitleVisible: false,\n    }}\n  >\n    <Stack.Screen name=\"Home\" component={Home} />\n    <Stack.Screen name=\"Game\" component={Game} />\n  </Stack.Navigator>\n);\n\nexport default Stacks;\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Stacks from \"./navigations/Stacks\";\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stacks />\n    </NavigationContainer>\n  );\n}\n"],"sourceRoot":""}